def lengthOfLongestSubstring(self, s: str) -> int:
        maxStr=""
        result=""
        start=end=0
        if len(s)<=1:
            return len(s)
        else:
            while(start<len(s) and end<len(s)):
                if not s[end] in maxStr:
                    maxStr+=s[end]
                    end+=1
                else:
                    start+=1
                    end=start
                    if len(maxStr)>len(result):
                        result=maxStr
                    maxStr=""
        if len(maxStr)>len(result):
            return len(maxStr)
        return len(result)


Problem Statement:
    Given a string s, find the length of the longest substring without repeating characters. 

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
 

Constraints:

0 <= s.length <= 5 * 104
s consists of English letters, digits, symbols and spaces.
